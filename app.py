import logging
import time
from pathlib import Path
from typing import Optional

import streamlit as st

from src.state import (
    init_state,
    clear_upload,
    clear_recording,
    cleanup_tmp,
)
from src.ui.record import render_record_section
from src.ui.upload import render_upload_section
from src.services.pipeline import run_pipeline

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

st.set_page_config(page_title="TMG", layout="centered")
st.title("–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á")

init_state()

# --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
mode = st.segmented_control(
    options=("üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å", "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å"),
    label="–†–µ–∂–∏–º",
    selection_mode="single",
    default=st.session_state.get("mode", "üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å"),
    key="mode",
)

prev_mode = st.session_state.get("_prev_mode")
if prev_mode is None:
    st.session_state._prev_mode = mode
elif prev_mode != mode:
    # —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    if mode == "üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å":
        clear_upload()
    else:
        clear_recording()
    cleanup_tmp()
    st.session_state._prev_mode = mode
    st.rerun()

# --- –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–µ–∂–∏–º–∞–º ---
if mode == "üéôÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å":
    render_record_section()
else:
    render_upload_section()

# --- –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ ---
source_path: Optional[Path] = st.session_state.rec_path or st.session_state.upload_path
source_dur: float = st.session_state.rec_duration or st.session_state.upload_duration or 0.0

start_btn = st.button(
    "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å",
    type="primary",
    use_container_width=True,
    disabled=(source_path is None) or (st.session_state.job is not None),
)

if start_btn and (source_path is not None) and (st.session_state.job is None):
    # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    st.session_state.est_sec = 0.43 * source_dur + 60  # 10 –º–∏–Ω –∞—É–¥–∏–æ ‚Üí ~5 –º–∏–Ω
    st.session_state.t_start = time.time()
    st.session_state.job = st.session_state.exec.submit(run_pipeline, source_path)

# --- –ø—Ä–æ–≥—Ä–µ—Å—Å/—Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
if st.session_state.job is not None:
    progress = st.progress(0, text="–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶")
    hard_timeout = st.session_state.est_sec * 4
    try:
        while True:
            if st.session_state.job.done():
                break
            elapsed = time.time() - st.session_state.t_start
            denom = st.session_state.est_sec or 20.0
            pct = min(99, int((elapsed / denom) * 100))
            progress.progress(pct, text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶ ~{int(max(0, denom - elapsed))} —Å–µ–∫")
            time.sleep(0.5)

        transcript_text, resume_text = st.session_state.job.result(timeout=5)
        progress.progress(100, text="")
        logger.info("transcript_text len=%s, resume_text len=%s", len(transcript_text), len(resume_text))

        combined = (
            "–ê–ù–ù–û–¢–ê–¶–ò–Ø\n"
            + resume_text.strip()
            + "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            + "–ü–†–û–¢–û–ö–û–õ\n"
            + transcript_text.strip()
        )
        st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç", combined, height=600, label_visibility="hidden")
    except TimeoutError as e:
        st.error(str(e))
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
    finally:
        st.session_state.job = None
        cleanup_tmp()

